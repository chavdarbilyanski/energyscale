Switch from gym to gymnasium - done

GLOBAL_OPTIMAL:

from pulp import LpMaximize, LpProblem, LpVariable, lpSum

# In calculate_globally_optimal_profit
prob = LpProblem("BESS_Arbitrage", LpMaximize)
prices = df['price'].tolist()
T = len(prices)
charge = [LpVariable(f"charge_{t}", 0, charge_discharge_rate) for t in range(T)]
discharge = [LpVariable(f"discharge_{t}", 0, charge_discharge_rate) for t in range(T)]
soc = [LpVariable(f"soc_{t}", 0, max_battery_capacity) for t in range(T)]  # State of charge

prob += lpSum([prices[t] * (discharge[t] - charge[t]) / 1000 for t in range(T)])  # Objective: profit in EUR/kWh

# Constraints
for t in range(T):
    if t == 0:
        prob += soc[0] == charge[0] - discharge[0]
    else:
        prob += soc[t] == soc[t-1] + charge[t] - discharge[t]
prob.solve()
return value(prob.objective)

=====
Notes for BESS + Solar Workflow
Tuning: If MAE/RMSE (~20/29 from your metrics) remain high, try hidden_size=256, epochs=100 in MLflow sweeps. Log in train_lstm for comparison.
Solar Extension: For multivariate LSTM (e.g., price + solar_kwh), update input_size=2 in PriceLSTM, pass solar data in PriceDataset. Ensure hidden_size is logged/retrieved similarly.
GCP Scalability: Use Vertex AI for hyperparam tuning (e.g., hidden_size, dropout=0.3 for solar noise). Store artifacts in GCS; integrate with BigQuery for Django profit dashboards.
If errors persist (e.g., MLflow issues or metric degradation), share the new run ID or metrics for debugging. For solar integration, provide sample solar_kwh data for code tweaks.

